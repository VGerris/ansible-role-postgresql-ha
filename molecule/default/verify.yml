---
- name: Verify
  hosts: pgcluster
  become: yes
  gather_facts: yes

  tasks:
    - name: Verify cluster functionality
      ansible.builtin.shell:
        cmd: repmgr cluster crosscheck
        executable: /bin/bash
      become_user: "{{ postgresql_service_user }}"
      register: cluster_crosscheck
      tags: ['skip_ansible_lint']

    - name: Print result
      ansible.builtin.debug:
        msg:
          "cluster_crosscheck": "{{ cluster_crosscheck.stdout_lines }}"

    - name: Ensure testdb is created
      ansible.builtin.shell:
        cmd: psql -c '\l testdb' # returns 0 if exists
      become_user: "{{ postgresql_service_user }}"

    - name: Perform manual failover check
      ansible.builtin.shell:
        cmd: repmgr standby switchover --siblings-follow --dry-run
        executable: /bin/bash
      become_user: "{{ postgresql_service_user }}"
      when: inventory_hostname == 'pgsql02'
      register: repmgr_switchover_check

    - name: Print result
      ansible.builtin.debug:
        msg:
          "repmgr_switchover_check": "{{ repmgr_switchover_check.stdout_lines }}"
      when: inventory_hostname == 'pgsql02'

    - name: Perform actual manual switchover
      ansible.builtin.shell:
        cmd: repmgr standby switchover --siblings-follow
        executable: /bin/bash
      become_user: "{{ postgresql_service_user }}"
      when: inventory_hostname == 'pgsql02'

    - name: Wait for pgsql service
      ansible.builtin.wait_for:
        port: "{{ postgresql_port }}"

    - name: Show cluster status
      ansible.builtin.shell:
        cmd: repmgr cluster show
        executable: /bin/bash
      become_user: "{{ postgresql_service_user }}"
      register: cluster_status

    - name: Print result
      ansible.builtin.debug:
        msg:
          "cluster_status": "{{ cluster_status.stdout_lines }}"
