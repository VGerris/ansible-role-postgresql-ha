---
- hosts: pgcluster
  gather_facts: yes
  become: yes
  debugger: on_failed
  vars:
    role_path: "{{ lookup('env', 'ROLE_PATH') }}"
  pre_tasks:
    - name: Install python dependencies
      apt: 
        name: 
          - python3-apt
          - python3-pip
          - libpq-dev # required for psycog2
        update_cache: yes
    - name: Use python3 by default
      alternatives: 
        path: /usr/bin/python3
        link: /usr/bin/python
        name: python
        priority: 1
    - name: Use pip3 by default
      alternatives: 
        path: /usr/bin/pip3
        link: /usr/bin/pip
        name: pip
        priority: 1
    - name: Install pip dependencies
      pip:
        name: psycopg2
        state: present
    - name: Debug variables
      debug:
        msg:
          "postgresql_version": "{{ postgresql_version }}"
          "repmgr_master": "{{ repmgr_master }}"
          "repmgr_target_group": "{{ repmgr_target_group }}"
          "repmgr_node_id": "{{ repmgr_node_id }}"
  roles:
    - name: "{{ role_path if role_path is defined and role_path else lookup('env', 'HOME') + '/ansible-role-postgresql-ha' }}"
      vars:
        # Required configuration items
        repmgr_target_group: pgcluster
        repmgr_master: pgsql01
        repmgr_failover: automatic
        repmgr_promote_command: /usr/bin/repmgr standby promote --siblings-follow --log-to-file
        repmgr_follow_command: /usr/bin/repmgr standby follow -W --upstream-node-id=%n --log-to-file
        repmgr_monitoring_history: "yes"
        repmgr_log_level: DEBUG
        repmgr_connection_check_type: query
        # Basic settings
        postgresql_version: 11
        postgresql_cluster_name: main
        postgresql_cluster_reset: false # TODO: Needs to be tested for repmgr
        postgresql_listen_addresses: "*"
        postgresql_port: 5432
        postgresql_wal_level: "replica"
        postgresql_max_wal_senders: 10
        postgresql_max_replication_slots: 10
        postgresql_wal_keep_segments: 100
        postgresql_hot_standby: on
        postgresql_archive_mode: on
        postgresql_archive_command: "test ! -f /tmp/%f && cp %p /tmp/%f"
        postgresql_ext_install_repmgr: yes
        postgresql_shared_preload_libraries:
          - repmgr
        # postgresql logging 
        postgresql_log_checkpoints: on
        postgresql_log_connections: on
        postgresql_log_disconnections: on
        postgresql_log_temp_files: 0
        # pg_hba.conf
        postgresql_pg_hba_custom:
          - { type: "host", database: "all", user: "all", address: "192.168.56.0/24", method: "md5" }
          - { type: "host", database: "replication", user: "{{ repmgr_user }}", address: "192.168.56.0/24", method: "trust" }  
          - { type: "host", database: "replication", user: "{{ repmgr_user }}", address: "127.0.0.1/32", method: "trust" }  
          - { type: "host", database: "{{ repmgr_database }}", user: "{{ repmgr_user }}", address: "127.0.0.1/32", method: "trust" }  
          - { type: "host", database: "{{ repmgr_database }}", user: "{{ repmgr_user }}", address: "192.168.56.0/32", method: "trust" }  
        # Databases
        postgresql_databases:
          - name: "{{ repmgr_database }}"
            owner: "{{ repmgr_user }}"
            encoding: "UTF-8"
          - name: testdb
            owner: admin
            encoding: "UTF-8"
        # Users
        postgresql_users:
          - name: "{{ repmgr_user }}"
            pass: "{{ repmgr_password }}"
          - name: admin
            pass: secret # postgresql >=10 does not accept unencrypted passwords
            encrypted: yes
        # Roles
        postgresql_user_privileges:
          - name: "{{ repmgr_user }}"
            db: "{{ repmgr_database }}"
            priv: "ALL"
            role_attr_flags: "SUPERUSER,REPLICATION"
          - name: admin
            db: testdb
            role_attr_flags: "SUPERUSER"
